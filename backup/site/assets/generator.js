(() => {
  const el = (id) => document.getElementById(id);

  const nodeStdIoIndex = (name) => `import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

const server = new McpServer({ name: "${name}", version: "0.1.0" });

// sample tool
server.registerTool("ping", {
  title: "Ping",
  description: "Return pong with echo",
  inputSchema: { message: z.string().default("ping") }
}, async ({ message }) => ({
  content: [{ type: "text", text: "pong: " + message }]
}));

// sample resource
server.registerResource("greeting", "greeting://{name}", {
  title: "Greeting",
  description: "Dynamic greeting resource"
}, async (uri, params) => ({
  contents: [{ uri: uri.href, text: \`Hello, \${params.name}!\` }]
}));

const transport = new StdioServerTransport();
await server.connect(transport);
`;

  const nodePackageJson = (name) => `{
  "name": "${name}",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "start": "node src/index.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.17.5",
    "zod": "^3.23.8"
  },
  "engines": { "node": ">=18" }
}
`;

  const pyServer = (name, transport) => `from mcp.server.fastmcp import FastMCP

mcp = FastMCP("${name}")

@mcp.tool()
def ping(message: str = "ping") -> str:
    "Return pong with echo"
    return f"pong: {message}"

@mcp.resource("greeting://{name}")
def greeting(name: str) -> str:
    return f"Hello, {name}!"

if __name__ == "__main__":
    mcp.run(transport="${transport}")
`;

  const pyProject = (name) => `[project]
name = "${name}"
version = "0.1.0"
description = "MCP server"
requires-python = ">=3.10"
dependencies = ["mcp[cli]"]
`;

  const readme = ({name, lang, transport}) => `# ${name}

Starter MCP server generated by MCP Generator.

## Run

### ${lang === 'python' ? 'Python (uv)' : 'Node.js'}

${lang === 'python' ? 
`1) Install uv: https://astral.sh
2) Create venv & install deps:
   uv venv
   uv pip install "mcp[cli]"
3) Run:
   uv run server.py
` : 
`1) Install deps:
   npm i
2) Run:
   npm start
`}

Transport: **${transport}**

> STDIO: do **not** log to stdout (use stderr/logger). Streamable HTTP is recommended for hosted scenarios. See MCP docs for details.

## Claude Desktop config (example, macOS)

Edit \`~/Library/Application Support/Claude/claude_desktop_config.json\` and add:

${lang === 'python' ? 
`{
  "mcpServers": {
    "${name}": { "command": "uv", "args": ["run", "server.py"] }
  }
}` : 
`{
  "mcpServers": {
    "${name}": { "command": "node", "args": ["src/index.js"] }
  }
}`
}

Restart Claude Desktop.

`;

  const manifest = ({id, name, transport}) => ({
    id,
    name,
    category: "general",
    transports: [transport],
    homepage: "",
    updated_at: new Date().toISOString(),
    connect: (transport === 'streamable-http')
      ? { endpoint_url: "https://YOUR_HOST/mcp" }
      : undefined,
    manifests: [
      { path: "mcp-server.json" }
    ]
  });

  const ghaValidate = `name: Validate
on: [push]
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm i @modelcontextprotocol/sdk zod --no-fund --no-audit
      - run: echo "OK"`
  ;

  function buildZip({name, lang, transport, addSamples, addCI}) {
    const zip = new JSZip();
    const root = zip.folder(name);
    // catalog manifest for your site
    root.file("mcp-server.json", JSON.stringify(manifest({id: name, name, transport}), null, 2));
    root.file(".env.example", "# put your API keys here\n");

    if (lang === 'node') {
      const src = root.folder("src");
      src.file("index.js", nodeStdIoIndex(name));
      root.file("package.json", nodePackageJson(name));
    } else {
      root.file("server.py", pyServer(name, transport));
      root.file("pyproject.toml", pyProject(name));
    }

    root.file("README.md", readme({name, lang, transport}));
    if (addCI) root.folder(".github/workflows").file("validate.yml", ghaValidate);

    return zip;
  }

  function syncCompatMessage() {
    const lang = el('lang').value;
    const tr = el('transport').value;
    const msg = el('compatMsg');
    msg.style.display = (lang === 'node' && tr === 'streamable-http') ? 'inline-block' : 'none';
  }

  // UI events
  ['lang','transport'].forEach(id => el(id).addEventListener('change', syncCompatMessage));
  syncCompatMessage();

  // Preview manifest
  el('btnPreviewManifest').addEventListener('click', () => {
    const name = el('srvName').value.trim() || 'my-mcp-server';
    const lang = el('lang').value;
    const transport = el('transport').value;
    const mf = manifest({id: name, name, transport});
    el('preview').textContent = JSON.stringify(mf, null, 2);
  });

  // Download ZIP
  el('btnZip').addEventListener('click', async () => {
    const name = el('srvName').value.trim() || 'my-mcp-server';
    const lang = el('lang').value;
    const transport = el('transport').value;
    const addSamples = el('addSamples').checked;
    const addCI = el('addCI').checked;

    // В первой итерации Node поддерживает только STDIO
    const finalTransport = (lang === 'node') ? 'stdio' : transport;

    const zip = buildZip({name, lang, transport: finalTransport, addSamples, addCI});
    const blob = await zip.generateAsync({type: "blob"});
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = `${name}.zip`;
    a.click();
    URL.revokeObjectURL(a.href);

    el('preview').textContent = `ZIP generated: ${name}.zip\nLanguage: ${lang}\nTransport: ${finalTransport}`;
  });
})();
